---

- name: "Ensure cluster token is captured from {{ rke2_control_delegate }}"
  ansible.builtin.slurp:
    path: "{{ rke2_runtime_config['data-dir'] | default(rke2_data_dir) }}/server/token"
  register: rke2_slurped_cluster_token
  delegate_to: "{{ rke2_control_delegate }}"
  when:
    - rke2_control_token is not defined
    - not ansible_check_mode
  become: "{{ rke2_become }}"

- name: Ensure cluster token is formatted correctly for use in templates
  ansible.builtin.set_fact:
    rke2_control_token_content: "{{ rke2_control_token | default(rke2_slurped_cluster_token.content | b64decode) }}"
  when:
    - rke2_control_token is not defined
    - not ansible_check_mode

- name: Ensure dummy cluster token is defined for ansible_check_mode
  ansible.builtin.set_fact:
    rke2_control_token_content: "{{ rke2_control_delegate | to_uuid }}"
  check_mode: false
  when:
    - ansible_check_mode

- name: Ensure the cluster token file location exists
  ansible.builtin.file:
    path: "{{ rke2_token_location | dirname }}"
    state: directory
    mode: 0755
  become: "{{ rke2_become }}"

- name: Ensure rke2 cluster token file is present
  ansible.builtin.template:
    src: cluster-token.j2
    dest: "{{ rke2_token_location }}"
    mode: 0600
  become: "{{ rke2_become }}"
  notify:
    - "Restart rke2 {{ rke2_service_handler[ansible_service_mgr] }}"

- name: Ensure rke2 service unit file is present
  ansible.builtin.template:
    src: rke2.service.j2
    dest: "{{ rke2_systemd_unit_dir }}/rke2.service"
    mode: 0644
  become: "{{ rke2_become }}"
  when:
    - rke2_service_handler[ansible_service_mgr] == 'systemd'
  notify:
    - "Reload {{ rke2_service_handler[ansible_service_mgr] }}"
    - "Restart rke2 {{ rke2_service_handler[ansible_service_mgr] }}"

- name: Ensure rke2 service file is present
  ansible.builtin.template:
    src: rke2.openrc.j2
    dest: "{{ rke2_openrc_service_dir }}/rke2"
    mode: 0744
  when:
    - rke2_service_handler[ansible_service_mgr] == 'service'
  notify:
    - "Reload {{ rke2_service_handler[ansible_service_mgr] }}"
    - "Restart rke2 {{ rke2_service_handler[ansible_service_mgr] }}"
  become: "{{ rke2_become }}"

- name: Ensure rke2 logrotate file is present
  ansible.builtin.template:
    src: rke2.logrotate.j2
    dest: "{{ rke2_logrotate_dir }}/rke2"
    mode: 0640
  when:
    - rke2_service_handler[ansible_service_mgr] == 'service'
  notify:
    - "Reload {{ rke2_service_handler[ansible_service_mgr] }}"
    - "Restart rke2 {{ rke2_service_handler[ansible_service_mgr] }}"
  become: "{{ rke2_become }}"

- name: Ensure rke2 config file exists
  ansible.builtin.template:
    src: config.yaml.j2
    dest: "{{ rke2_config_file }}"
    mode: 0644
  notify:
    - "Reload {{ rke2_service_handler[ansible_service_mgr] }}"
    - "Restart rke2 {{ rke2_service_handler[ansible_service_mgr] }}"
  become: "{{ rke2_become }}"

- name: Ensure secondary controllers are started
  ansible.builtin.include_tasks: ensure_control_plane_started_{{ ansible_service_mgr }}.yml
  when:
    - rke2_control_node
    - not rke2_primary_control_node

- name: Run control plane post checks
  ansible.builtin.import_tasks: post_checks_control_plane.yml
  when:
    - not rke2_skip_validation
    - not rke2_skip_post_checks

- name: Flush Handlers
  ansible.builtin.meta: flush_handlers

- name: Run node post checks
  ansible.builtin.import_tasks: post_checks_nodes.yml
  when:
    - not rke2_skip_validation
    - not rke2_skip_post_checks
